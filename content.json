{"posts":[{"title":"测试","text":"这是一篇测试文章","link":"/2021/06/10/%E6%B5%8B%E8%AF%95/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/07/06/hello-world/"},{"title":"","text":"​ 在最近参与的项目开发中，我经常看到现有的代码中定义完类的属性之后，就顺手把这些属性的 getter、setter 方法都定义上。一般都是直接用 IDE 或者 Lombok 插件自动生成所有属性的 getter、setter 方法。而如此做的理由，一般是为了以后可能会用到，现在事先定义好，类用起来就更加方便，而且即便用不到这些 getter、setter 方法，也没什么影响。 ​ 实际上，它违反了面向对象编程的封装特性，相当于将面向对象编程风格退化成了面向过程编程风格。而面向对象封装的定义是：通过访问权限控制，隐藏内部数据，外部仅能通过类提供的有限的接口访问、修改内部数据。所以，暴露不应该暴露的 setter 方法，明显违反了面向对象的封装特性。数据没有访问权限控制，任何代码都可以随意修改它，代码就退化成了面向过程编程风格的了。除此之外，如果getter 方法返回的是一个 List集合容器。外部调用者在拿到这个容器之后，是可以操作容器内部数据的，也就是说，外部代码还是能修改封装类中的数据。 ​ 况且，我一般参与的项目都是基于 MVC 三层结构做 Web 方面的后端开发，这样的代码大概率天天都在写。传统的 MVC 结构分为 Model 层、Controller 层、View 层这三层。不过，在做前后端分离之后，三层结构在后端开发中，会稍微有些调整，被分为 Controller 层、Service 层、Repository 层。Controller 层负责暴露接口给前端调用，Service 层负责核心业务逻辑，Repository 层负责数据读写。这种开发模式叫作基于贫血模型的开发模式，也是我们现在非常常用的一种 Web 项目的开发模式。 ​ 贫血模式和充血模式是两种不同的面向对象编程模式，它们的主要区别在于数据和业务逻辑的封装方式。 ​ 贫血模式中，数据和业务逻辑是分离的。数据通常被封装在简单的数据类（实体类）中，而业务逻辑则被封装在单独的服务类中。服务类通过调用数据类的方法来操作数据，但数据类本身并没有包含业务逻辑。这种模式的优点是简单易懂，易于实现和维护，适合于简单的业务场景。 ​ 充血模式中，数据和业务逻辑是紧密结合的。数据类不仅包含数据，还包含业务逻辑。业务逻辑被直接封装在数据类的方法中，使得数据类具有更强的行为能力。这种模式的优点是更加符合面向对象的设计原则，能够更好地封装业务逻辑，提高代码的内聚性和可维护性。 ​ 既然这种贫血开发模式明显违背面向对象的编程风格，为什么大部分 Web 项目都是基于这种开发模式来开发呢？我想是因为其设计比较简单，且使用起来符合我们的正常思维方式，但却使得我们写出的大多都是面向过程的代码。 ​ 虽然基于贫血模型的开发模式在 Web 项目中被广泛使用，但它并不是完美的解决方案。贫血模型将数据和业务逻辑分离，导致业务逻辑分散在 Service 层中，使得代码的可读性和可维护性降低。此外，贫血模型也可能导致领域模型的缺失，使得业务概念不够清晰。 ​ 为了解决这些问题，一些新的开发模式和架构被提出。其中，领域驱动设计（DDD）是一种非常流行的方法。DDD 强调将业务领域的概念和逻辑封装在领域模型中，通过领域对象来实现业务功能。领域模型不仅包含数据，还包含业务逻辑和规则，使得代码更加内聚和易于理解。","link":"/2024/07/12/%E4%BD%BF%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E8%A8%80%E5%8D%B4%E6%80%BB%E6%98%AF%E5%86%99%E5%87%BA%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%BB%A3%E7%A0%81%E5%8F%8D%E6%80%9D/"}],"tags":[{"name":"原创","slug":"原创","link":"/tags/%E5%8E%9F%E5%88%9B/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"}],"pages":[{"title":"郝若宇的博客","text":"","link":"/about/index.html"}]}